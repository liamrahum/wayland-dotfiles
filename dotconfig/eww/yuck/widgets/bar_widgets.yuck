(defwidget panel_launcher [] (box :class "button-bin launcher"
    (button
        :class "button launcher"
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu app_launcher"
        (label :class "icon" :text "󰣇" :halign "center")
    )
))

(defwidget panel_workspaces [orientation] (box :class "button-bin"
    (eventbox :class "button workspaces"
        (box
            :space-evenly false
            :orientation orientation
            (for workspace in {workspaces.workspaces}
                (button
                    :class "workspace-btn ${workspace.id == workspaces.active ? "active" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    :valign "center"
                    (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == workspaces.active ? "" : ""}" : ""})
                )
            )
        )
    )
))

(defwidget panel_window [angle] (box :class "button-bin"
    (button :class "button window" 
        (label
            :visible {window != "null" ? true : false}
            :text {window}
            :angle angle)
    )
))

(defwidget panel_separator [orientation dots visible] (box
    :orientation orientation
    :class "separator"
    :space-evenly false
    :visible visible
    (for dot in dots
        (box :class "dot" :halign "center" :hexpand true :valign "center"))))

(defwidget controls_slider [control reveal value onchange icon orientation transition] (eventbox
    :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :space-evenly false
        :orientation orientation
        (revealer
            :transition transition
            :duration "300ms"
            :reveal reveal
            :class "reveal"
            (eventbox :class "slider ${orientation}" (scale
                :orientation orientation
                :flipped {orientation == "v"}
                :value value
                :onchange onchange)))
        (label
            :class "${control} icon"
            :text icon)
    )
))

(defwidget controls_icon [control reveal value icon style angle orientation transition visible] (eventbox
    :visible visible
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :space-evenly false
        :orientation orientation
        (revealer
            :transition transition
            :duration "300ms"
            :reveal reveal
            :class "reveal"
            (label
                :class "${style} ${control}"
                :angle angle
                :text value)
        )
        (label
            :class "${style} ${control} icon"
            :text icon)
    )
))

(defvar bluetooth_reveal false)
(defvar bt_speaker_reveal false)
(defvar mute_reveal false)
(defvar notifications_reveal false)
(defvar battery_reveal false)
(defvar network_reveal false)
(defvar volume_reveal false)
(defvar screen_reveal false)
(defwidget panel_controls [orientation] (box
    :class "controls"
    :orientation orientation
    :space-evenly false

    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "mute"
        :reveal mute_reveal
        :visible {volume.mute.state == "on"}
        :value "Muted"
        :icon {volume.mute.icon}
        :style ""
        :angle {orientation == "v" ? 90 : 0})
    (controls_slider
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "volume"
        :reveal volume_reveal
        :value {volume.level}
        :onchange "${EWW_CONFIG_DIR}/scripts/volume set {}"
        :icon {volume.icon})

))

(defwidget panel_system_indicators [orientation] (box :class "button-bin"
    (eventbox
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu quicksettings"
        :class "button system-indicators"
        (panel_controls :orientation orientation)
    )
))

(defwidget panel_powermenu [] (box :class "button-bin powermenu" (button
    :class "button powermenu"
    :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu powermenu"
    (label :class "icon" :text "")
)))

(defwidget panel_colorpicker [] (box :class "button-bin"
    (button
        :class "button colorpicker"
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher colorpicker"
        (label :class "icon" :text "󰈊")
    )
))
